package Explosion;

import Controllers.AssetManager;
import Controllers.AudioManager;
import Controllers.ExplosionController;
import Flames.Flame;
import Flames.FlameType;
import main.GameView;
import Tile.DestructibleBlock;
import Tile.Map;
import Tile.tileGerarchy.Tile;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

/**
 * The Explosion class represents the explosion generated by a bomb in the game. It consists of a central flame and
 * additional flames that propagate in different directions based on the explosion radius.
 *
 * @Author Daniele Marchetilli
 */
public class Explosion extends Observable implements Observer {

    public Explosion(int bombCol, int bombRow, int explosionRadius) {
        addObserver(ExplosionController.getInstance());

        Map map = AssetManager.getInstance().getMap();

        ArrayList<Flame> flames = new ArrayList<>();
        Flame centralFlame = new Flame(bombCol * GameView.tileSize, bombRow * GameView.tileSize, FlameType.BOMB_FLAME);
        AssetManager.getInstance().addFlame(centralFlame);
        flames.add(centralFlame);

        flames.addAll(createFlameList(bombRow, bombCol, -1, 0, explosionRadius, map, FlameType.VERTICAL_FLAME));

        flames.addAll(createFlameList(bombRow, bombCol, 1, 0, explosionRadius, map, FlameType.VERTICAL_FLAME));

        flames.addAll(createFlameList(bombRow, bombCol, 0, 1, explosionRadius, map, FlameType.HORIZONTHAL_FLAME));
        flames.addAll(createFlameList(bombRow, bombCol, 0, -1, explosionRadius, map, FlameType.HORIZONTHAL_FLAME));

        AudioManager audioManager = AudioManager.getInstance();
        audioManager.play("res/sounds/Super_Bomberman_Sound_Effects/bomb-explodes.wav");

    }

    /**
     * This functions creates a row of flames that as a starter point and then propagates to a specified direction for
     * a specified number of blocks.
     * @param row the starter row on the map.
     * @param col the starter column on the map.
     * @param rowIncrement specifies the row of the next flames.
     * @param colIncrement specifies the column of the next flames.
     * @param explosionRadius specifies for how many blocks to propagate the exlopsion.
     * @param map the map where the explosion will be set.
     * @param flameType the type of the flame.
     * @return
     */
    private ArrayList<Flame> createFlameList(int row, int col, int rowIncrement, int colIncrement, int explosionRadius, Map map, FlameType flameType) {
        ArrayList<Flame> flameList = new ArrayList<>();
        Tile tile;

        for (int i = 1; i <= explosionRadius; i++) {

            row += rowIncrement;
            col += colIncrement;

            tile = map.getTile(row, col);


            if (!tile.getTileType().isGetFire()){
                break;
            }

            if(tile.getTileType().isExplodable() && tile instanceof DestructibleBlock db) {
                db.explode();
                break;
            }

            if(i == explosionRadius) {
                switch(flameType) {
                    case VERTICAL_FLAME -> {
                        if(rowIncrement > 0) flameType = FlameType.LOWER_FLAME_TIP;
                        else flameType = FlameType.UPPER_FLAME_TIP;
                    }
                    case HORIZONTHAL_FLAME -> {
                        if(colIncrement > 0) flameType = FlameType.RIGHT_FLAME_TIP;
                        else flameType = FlameType.LEFT_FLAME_TIP;
                    }
                }
            }

            Flame f = new Flame(col * GameView.tileSize, row * GameView.tileSize, flameType);
            flameList.add(f);
            AssetManager.getInstance().addFlame(f);

        }

        return flameList;
    }

    @Override
    public void update(Observable o, Object arg) {
        setChanged();
        notifyObservers(arg);
    }
}
